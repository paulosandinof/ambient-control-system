Model SysADLModel ; package SmartPlaceDUD { dimension Temperatura unit Celsius { dimension = Temperatura } }     Requirement GerenciarLampadasRF ( 2 ) { text = "O sistema deve ser capaz de ligar as lâmpadas quando houverem pessoas na sala, e desligar quando não houver mais ninguém." derive VerificarPresencaRF ; }  Requirement DefinirTemperaturaDesejadaRF ( 1.1 ) { text = "O sistema deve permitir que o usuário defina a temperatura do ar-condicionado por meio de um leitor na entrada da sala." derive AumentarTemperaturaRF , ReduzirTemperaturaRF ; } Requirement InterfaceWebRF ( 3 ) { text = "O sistema deve ser capaz de exibir em uma interface web, com status dos ar-condicionados das salas e a presença de pessoas." derive MonitorarArCondicionadosRF , MonitorarTemperaturaRF ; } Requirement GerenciarArCondicionadosRF ( 1 ) { text = "O sistema deve ser capaz de ligar o ar-condicionado, com a temperatura definida pelo usuário, quando houverem pessoas na sala, e desligar quando não houver mais ninguém." derive DefinirTemperaturaDesejadaRF ; } Requirement VerificarPresencaRF ( 2.1 ) { text = "O sistema deve verificar a presença de pessoas na sala, por meio de um sensor de presença." derive VerificarQuantidadeDePessoasRF ; } Requirement VerificarQuantidadeDePessoasRF ( 2.1.1 ) { text = "O sistema deve ser capaz de determinar a quantidade de pessoas presentes em uma sala." } Requirement MonitorarTemperaturaRF ( 3.3 ) { text = "O sistema deve receber os dados dos sensores de temperatura e calcular a temperatura média da sala." } Requirement MonitorarArCondicionadosRF ( 3.1 ) { text = "O sistema deve ser capaz de monitorar a situação dos ar-condiconados nas salas." }  Requirement AumentarTemperaturaRF ( 1.1.1 ) { text = "O sistema deve ser capaz de aumentar a temperatura do ar-condicionado, conforme o usuário aumente a temperatura no leitor." } Requirement ReduzirTemperaturaRF ( 1.1.2 ) { text = "O sistema deve ser capaz de reduzir a temperatura do ar-condicionado, conforme o usuário aumente a temperatura no leitor." } package SmartPlaceVLD { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } enum ComandoArCondicionado { ligar , desligar } value type Temperatura { dimension = SmartPlaceDUD.Temperatura } value type TemperaturaCelsius extends Temperatura { unit = SmartPlaceDUD.Celsius dimension = SmartPlaceDUD.Temperatura } enum ComandoLampada { ligar , desligar }  value type VideoStream { } datatype StatusArCondicionado { attributes : ligado : Boolean ; temperaturaAtual : TemperaturaCelsius ; } value type DadosArCondicionado { } datatype Comandos { attributes : comandoAc : ComandoArCondicionado ; comandoLp : ComandoLampada ; tempUsuario : TemperaturaCelsius ; } } package SmartPlacePTD { import SmartPlaceVLD ; port def PresencaIPT { flow in Boolean } port def PresencaOPT { flow out Boolean } port def ComandoArCondicionadoIPT { flow in ComandoArCondicionado } port def ComandoArCondicionadoOPT { flow out ComandoArCondicionado } port def TemperaturaIPT { flow in TemperaturaCelsius } port def TemperaturaOPT { flow out TemperaturaCelsius } port def ComandoLampadaIPT { flow in ComandoLampada } port def ComandoLampadaOPT { flow out ComandoLampada } port def VideoStreamIPT { flow in VideoStream } port def VideoStreamOPT { flow out VideoStream } port def PessoasIPT { flow in Int } port def PessoasOPT { flow out Int } port def StatusArCondicionadoIPT { flow in StatusArCondicionado } port def StatusArCondicionadoOPT { flow out StatusArCondicionado } port def DadosArCondiconadoIPT { flow in DadosArCondicionado } port def DadosArCondicionadoOPT { flow out DadosArCondicionado } } package SmartPlaceCND { import SmartPlacePTD ; connector def ComandoArCondicionadoCN { participants : ~ destino : ComandoArCondicionadoIPT ; ~ origem : ComandoArCondicionadoOPT ; flows :  ComandoArCondicionado from origem to destino }   connector def ComandoLampadaCN { participants : ~ destino : ComandoLampadaIPT ; ~ origem : ComandoLampadaOPT ; flows :  ComandoLampada from origem to destino } connector def VideoStreamCN { participants : ~ destino : VideoStreamIPT ; ~ origem : VideoStreamOPT ; flows :  VideoStream from origem to destino } connector def PessoasCN { participants : ~ destino : PessoasIPT ; ~ origem : PessoasOPT ; flows :  Int from origem to destino } connector def StatusArCondicionadoCN { participants : ~ destino : StatusArCondicionadoIPT ; ~ origem : StatusArCondicionadoOPT ; flows :  StatusArCondicionado from origem to destino } connector def TemperaturaCN { participants : ~ origem : TemperaturaOPT ; ~ destino : TemperaturaIPT ; flows : TemperaturaCelsius from origem to destino } connector def PresencaCN { participants : ~ origem : PresencaOPT ; ~ destino : PresencaIPT ; flows : Boolean from origem to destino } connector def DadosArcondicionadoCN { participants : ~ origem : ComandoArCondicionadoOPT ; ~ destino : ComandoArCondicionadoIPT ; flows : ComandoArCondicionado from origem to destino } } package SmartPlaceCPD { import SmartPlacePTD ; import SmartPlaceCND ; import SmartPlaceVLD ; boundary
	component def SensorPresencaCP { ports : detectado : PresencaOPT ; } boundary
	component def CameraCP { ports : video : VideoStreamOPT ; } boundary
	component def ArCondicionadoCP { ports : comando : ComandoArCondicionadoIPT ; temperaturaDesejada : TemperaturaIPT ;  dados : DadosArCondicionadoOPT ; } boundary
	component def SensorTemperaturaCP { ports : temperaturaAtual : TemperaturaOPT ; } boundary
	component def InterfaceWebCP { ports : temperaturaMediaAtual : TemperaturaIPT ; qtdPessoas : PessoasIPT ; status : StatusArCondicionadoIPT ; } boundary
	component def LampadaCP { ports :  comando : ComandoLampadaIPT ; }
	component def ControladorComandosCP { ports : detectado : PresencaIPT ; temperaturaUsuario : TemperaturaIPT ;  comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; temperaturaDesejada : TemperaturaOPT ; }
	component def MonitorTemperaturaCP { ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; } boundary
	component def LeitorTemperaturaCP { ports : temperaturaUsuario : TemperaturaOPT ; } component def ContadorPessoasCP { ports : video : VideoStreamIPT ; qtdPessoas : PessoasOPT ; }
	component def ControladorCP { ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaUsuario : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; detectado : PresencaIPT ; comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; video : VideoStreamIPT ; qtdPessoas : PessoasOPT ; temperaturaDesejada : TemperaturaOPT ;  status : StatusArCondicionadoOPT ; dados : DadosArCondiconadoIPT ; configuration { components : contador : ContadorPessoasCP { using ports : video : VideoStreamIPT ; qtdPessoas : PessoasOPT ; }  monitorTemp : MonitorTemperaturaCP { using ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; } controladorComandos : ControladorComandosCP { using ports : detectado : PresencaIPT ; temperaturaUsuario : TemperaturaIPT ; comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; temperaturaDesejada : TemperaturaOPT ; } monitorAc : MonitorArCondicionadoCP { using ports : origem : StatusArCondicionadoIPT ; destino : StatusArCondicionadoOPT ; } delegations : qtdPessoas to qtdPessoas video to video temperaturaMediaAtual to temperaturaMediaAtual temperaturaSensor1 to temperaturaSensor1 temperaturaSensor2 to temperaturaSensor2 detectado to detectado temperaturaUsuario to temperaturaUsuario comando to comando  temperaturaDesejada to temperaturaDesejada      destino to status origem to dados comando to comando } }
	component def Arquitetura { configuration { components : sensorPresenca1 : SensorPresencaCP { using ports : detectadoOut : PresencaOPT ; }  sensorTemp1 : SensorTemperaturaCP { using ports : tempSensor1Out : TemperaturaOPT ; } camera : CameraCP { using ports : videoOut : VideoStreamOPT ; } sensorTemp2 : SensorTemperaturaCP { using ports : tempSensor2Out : TemperaturaOPT ; }  lp1 : LampadaCP { using ports : cmdLpIn : ComandoLampadaIPT ; } leitor : LeitorTemperaturaCP { using ports : tempUsuariaOut : TemperaturaOPT ; } interface : InterfaceWebCP { using ports : tempMediaAtualOut : TemperaturaIPT ; qtdPessoasIn : PessoasIPT ; StatusIn : StatusArCondicionadoIPT ; }  ArCondicionadoCP : ArCondicionadoCP { using ports : cmdAcIn : ComandoArCondicionadoIPT ; tempDesejadaIn : TemperaturaIPT ; dadosOut : DadosArCondicionadoOPT ; } ControladorCP : ControladorCP { using ports : tempSensor1In : TemperaturaIPT ; tempSensor2In : TemperaturaIPT ; tempUsuarioIn : TemperaturaIPT ; tempMediaAtual : TemperaturaOPT ; detectadoIn : PresencaIPT ; cmdAcOut : ComandoArCondicionadoOPT ; cmdLpOut : ComandoLampadaOPT ; videoIn : VideoStreamIPT ; qtdPessoasOut : PessoasOPT ; tempDesejadaOut : TemperaturaOPT ; statusOut : StatusArCondicionadoOPT ; dadosIn : DadosArCondiconadoIPT ; } connectors :             c1 : TemperaturaCN bindings tempUsuariaOut = tempUsuarioIn ; c2 : TemperaturaCN bindings tempSensor1Out = tempSensor1In ; c3 : VideoStreamCN bindings videoOut = videoIn ; c4 : TemperaturaCN bindings tempSensor2Out = tempSensor2In ; c5 : PresencaCN bindings detectadoOut = detectadoIn ; c7 : PessoasCN bindings qtdPessoasOut = qtdPessoasIn ; c8 : TemperaturaCN bindings tempMediaAtual = tempMediaAtualOut ; c9 : StatusArCondicionadoCN bindings statusOut = StatusIn ; c10 : TemperaturaCN bindings tempDesejadaOut = tempDesejadaIn ; c11 : DadosArcondicionadoCN bindings dadosOut = dadosIn ; c6 : ComandoLampadaCN bindings cmdLpOut = cmdLpIn ; c12 : ComandoArCondicionadoCN bindings cmdAcOut = cmdAcIn ; } } component def MonitorArCondicionadoCP { ports :  destino : StatusArCondicionadoOPT ; dados : DadosArCondiconadoIPT ; } activity def CalcularTemperaturaMediaAC ( t1 : TemperaturaCelsius ) ( t2 : TemperaturaCelsius ) : ( tempMedia : TemperaturaCelsius ) { body { actions : CalcularTemperaturaMediaAN : CalcularTemperaturaMediaAN { using pins : t1 : TemperaturaCelsius ; t2 : TemperaturaCelsius ; } delegate t1 to t1 delegate t2 to t2 delegate tempMedia to CalcularTemperaturaMediaAN } } action def CalcularTemperaturaMediaAN ( t1 : TemperaturaCelsius , t2 : TemperaturaCelsius ) : TemperaturaCelsius { constraint : post-condition CalcularTemperaturaMediaEQ delegate t1 to t2 delegate t2 to t1 delegate CalcularTemperaturaMediaAN to tempMedia } constraint CalcularTemperaturaMediaEQ ( t1 : TemperaturaCelsius , t2 : TemperaturaCelsius ) : ( tempMedia : TemperaturaCelsius ) { equation = tempMedia == (t1+t2) / 2 } activity def ContarPessoasAC ( video : VideoStream ) : ( qtdPessoas : Int ) { body { actions : ContarPessoasAN : ContarPessoasAN { using pins : video : VideoStream ; } delegate video to video delegate qtdPessoas to ContarPessoasAN } } action def ContarPessoasAN ( video : VideoStream ) : Int { constraint : post-condition ContarPessoasEQ delegate video to video delegate ContarPessoasAN to qtdPessoas } constraint ContarPessoasEQ ( video : VideoStream ) : ( qtdPessoas : Int ) { 
		equation = qtdPessoas == funcaoConverterVideo
	} activity def ConverterDadosArCondicionadoAC ( dados : DadosArCondicionado ) : ( status : StatusArCondicionado ) { body { actions : ConverterDadosArCondicionadoAN : ConverterDadosArCondicionadoAN { using pins : dados : DadosArCondicionado ; } delegate dados to dados delegate status to ConverterDadosArCondicionadoAN } } action def ConverterDadosArCondicionadoAN ( dados : DadosArCondicionado ) : StatusArCondicionado { constraint : post-condition ConverterDadosArCondicionadoEQ delegate dados to dados delegate ConverterDadosArCondicionadoAN to status } constraint ConverterDadosArCondicionadoEQ ( dados : DadosArCondicionado ) : ( status : StatusArCondicionado ) { 
		equation = status == funcaoConverterDados
	}  action def ComandarLampadaAN (  comandos : Comandos ) : ComandoLampada { constraint : post-condition ComandarLampadaEQ delegate ComandarLampadaAN to comandoLp delegate comandos to comandos } action def ComandarArCondicionadoAN (  comandos : Comandos ) : ComandoArCondicionado { constraint : post-condition ComandarArCondicionadoEQ delegate comandos to comandos delegate ComandarArCondicionadoAN to comandoAc }   action def EstabelecerTemperaturaAN ( comandos : Comandos ) : TemperaturaCelsius { constraint : post-condition EstabelecerTemperaturaEQ delegate comandos to comandos delegate EstabelecerTemperaturaAN to tempDesejada } activity def ComandarEquipamentosAC ( presenca : Boolean ) ( tempUsuario : TemperaturaCelsius ) : ( comandoAc : ComandoArCondicionado , comandoLp : ComandoLampada , tempDesejada : TemperaturaCelsius ) { body { actions : ComandarEquipamentosAN : ComandarEquipamentosAN { using pins : presenca : Boolean ; tempUsuario : TemperaturaCelsius ; } EstabelecerTemperaturaAN : EstabelecerTemperaturaAN { using pins : comandos2 : Comandos ; } ComandarArCondicionadoAN : ComandarArCondicionadoAN { using pins : comandos1 : Comandos ; } ComandarLampadaAN : ComandarLampadaAN { using pins : comandos3 : Comandos ; } delegate tempUsuario to tempUsuario delegate presenca to presenca flow from ComandarEquipamentosAN to comandos1 flow from ComandarEquipamentosAN to comandos2 flow from ComandarEquipamentosAN to comandos3 delegate comandoAc to ComandarArCondicionadoAN delegate tempDesejada to EstabelecerTemperaturaAN delegate comandoLp to ComandarLampadaAN } } action def ComandarEquipamentosAN ( presenca : Boolean , tempUsuario : TemperaturaCelsius ) : Comandos { constraint : post-condition ComandarEquipamentosEQ delegate tempUsuario to tempUsuario delegate presenca to presenca delegate ComandarEquipamentosAN to comandos } constraint ComandarEquipamentosEQ ( presenca : Boolean , tempUsuario : TemperaturaCelsius ) : ( comandos : Comandos ) { 
		equation = (presenca == true) ? (comandos->tempUsuario == tempUsuario && comandos->comandoAc == ComandoArCondicionado::ligar && comandos->comandoLp == ComandoLampada::ligar) : (comandos->comandoAc == ComandoArCondicionado::desligar && comandos->comandoLp == ComandoLampada::desligar)
	} constraint ComandarLampadaEQ ( comandos : Comandos ) : ( comandoLp : ComandoLampada ) { 
		equation = (comandos->comandoLp == ComandoLampada::ligar) ? (comandoLp == ComandoLampada::ligar) : (comandoLp == ComandoLampada::desligar)
	} constraint ComandarArCondicionadoEQ ( comandos : Comandos ) : ( comandoAc : ComandoArCondicionado ) { 
		equation = (comandos->comandoAc == ComandoArCondicionado::ligar) ? (comandoAc == ComandoArCondicionado::ligar) : (comandoAc == ComandoArCondicionado::desligar)
	} constraint EstabelecerTemperaturaEQ ( comandos : Comandos ) : ( tempDesejada : TemperaturaCelsius ) { 
		equation = tempDesejada == comandos->tempUsuario
	} }