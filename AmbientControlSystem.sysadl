Model SysADLModel ; package SmartPlaceDUD { dimension Temperatura unit Celsius { dimension = Temperatura } }     Requirement GerenciarLampadasRF ( 2 ) { text = "O sistema deve ser capaz de ligar as lâmpadas quando houverem pessoas na sala, e desligar quando não houver mais ninguém." derive VerificarPresencaRF ; }  Requirement DefinirTemperaturaDesejadaRF ( 1.1 ) { text = "O sistema deve permitir que o usuário defina a temperatura do ar-condicionado por meio de um leitor na entrada da sala." derive AumentarTemperaturaRF , ReduzirTemperaturaRF ; } Requirement InterfaceWebRF ( 3 ) { text = "O sistema deve ser capaz de exibir em uma interface web, com status dos ar-condicionados das salas e a presença de pessoas." derive MonitorarArCondicionadosRF , MonitorarTemperaturaRF ; } Requirement GerenciarArCondicionadosRF ( 1 ) { text = "O sistema deve ser capaz de ligar o ar-condicionado, com a temperatura definida pelo usuário, quando houverem pessoas na sala, e desligar quando não houver mais ninguém." derive DefinirTemperaturaDesejadaRF ; } Requirement VerificarPresencaRF ( 2.1 ) { text = "O sistema deve verificar a presença de pessoas na sala, por meio de um sensor de presença." derive VerificarQuantidadeDePessoasRF ; } Requirement VerificarQuantidadeDePessoasRF ( 2.1.1 ) { text = "O sistema deve ser capaz de determinar a quantidade de pessoas presentes em uma sala." } Requirement MonitorarTemperaturaRF ( 3.3 ) { text = "O sistema deve receber os dados dos sensores de temperatura e calcular a temperatura média da sala." } Requirement MonitorarArCondicionadosRF ( 3.1 ) { text = "O sistema deve ser capaz de monitorar a situação dos ar-condiconados nas salas." }  Requirement AumentarTemperaturaRF ( 1.1.1 ) { text = "O sistema deve ser capaz de aumentar a temperatura do ar-condicionado, conforme o usuário aumente a temperatura no leitor." } Requirement ReduzirTemperaturaRF ( 1.1.2 ) { text = "O sistema deve ser capaz de reduzir a temperatura do ar-condicionado, conforme o usuário aumente a temperatura no leitor." } package SmartPlaceVLD { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } enum ComandoArCondicionado { ligar , desligar } value type Temperatura { dimension = SmartPlaceDUD.Temperatura } value type TemperaturaCelsius extends Temperatura { unit = SmartPlaceDUD.Celsius dimension = SmartPlaceDUD.Temperatura } enum ComandoLampada { ligar , desligar } datatype ArCondicionado { attributes : ArCondicionado : ComandoArCondicionado ; } value type VideoStream { } datatype StatusArCondicionado { attributes : ligado : Boolean ; temperaturaAtual : TemperaturaCelsius ; } } package SmartPlacePTD { import SmartPlaceVLD ; port def PresencaIPT { flow in Boolean } port def PresencaOPT { flow out Boolean } port def ComandoArCondicionadoIPT { flow in ComandoArCondicionado } port def ComandoArCondicionadoOPT { flow out ComandoArCondicionado } port def TemperaturaIPT { flow in TemperaturaCelsius } port def TemperaturaOPT { flow out TemperaturaCelsius } port def ComandoLampadaIPT { flow in ComandoLampada } port def ComandoLampadaOPT { flow out ComandoLampada } port def VideoStreamIPT { flow in VideoStream } port def VideoStreamOPT { flow out VideoStream } port def PessoasIPT { flow in Int } port def PessoasOPT { flow out Int } port def StatusArCondicionadoIPT { flow in StatusArCondicionado } port def StatusArCondicionadoOPT { flow out StatusArCondicionado } } package SmartPlaceCND { import SmartPlacePTD ; connector def ComandoArCondicionadoCN { participants : ~ destino : ComandoArCondicionadoIPT ; ~ origem : ComandoArCondicionadoOPT ; flows :  ComandoArCondicionado from origem to destino }   connector def ComandoLampadaCN { participants : ~ destino : ComandoLampadaIPT ; ~ origem : ComandoLampadaOPT ; flows :  ComandoLampada from origem to destino } connector def VideoStreamCN { participants : ~ destino : VideoStreamIPT ; ~ origem : VideoStreamOPT ; flows :  VideoStream from origem to destino } connector def PessoasCN { participants : ~ destino : PessoasIPT ; ~ origem : PessoasOPT ; flows :  Int from origem to destino } connector def StatusArCondicionadoCN { participants : ~ destino : StatusArCondicionadoIPT ; ~ origem : StatusArCondicionadoOPT ; flows :  StatusArCondicionado from origem to destino } connector def TemperaturaCN { participants : ~ origem : TemperaturaOPT ; ~ destino : TemperaturaIPT ; flows : TemperaturaCelsius from origem to destino } connector def PresencaCN { participants : ~ origem : PresencaOPT ; ~ destino : PresencaIPT ; flows : Boolean from origem to destino } } package SmartPlaceCPD { import SmartPlacePTD ; import SmartPlaceCND ; boundary
	component def SensorPresencaCP { ports : detectado : PresencaOPT ; } boundary
	component def CameraCP { ports : video : VideoStreamOPT ; } boundary
	component def ArCondicionadoCP { ports : comando : ComandoArCondicionadoIPT ; temperaturaDesejada : TemperaturaIPT ; status : StatusArCondicionadoOPT ; } boundary
	component def SensorTemperaturaCP { ports : temperaturaAtual : TemperaturaOPT ; } boundary
	component def InterfaceWebCP { ports : temperaturaMediaAtual : TemperaturaIPT ; qtdPessoas : PessoasIPT ; status : StatusArCondicionadoIPT ; } boundary
	component def LampadaCP { ports :  comando : ComandoLampadaIPT ; }
	component def ControladorComandosCP { ports : detectado : PresencaIPT ; temperaturaUsuario : TemperaturaIPT ;  comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; temperaturaDesejada : TemperaturaOPT ; }
	component def MonitorTemperaturaCP { ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; } boundary
	component def LeitorTemperaturaCP { ports : temperaturaDesejada : TemperaturaOPT ; } component def ContadorPessoasCP { ports : video : VideoStreamIPT ; qtdPessoas : PessoasOPT ; }
	component def ControladorCP { ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaUsuario : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; detectado : PresencaIPT ; comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; video : VideoStreamIPT ; qtdPessoas : PessoasOPT ; temperaturaDesejada : TemperaturaOPT ; status : StatusArCondicionadoIPT ; status : StatusArCondicionadoOPT ; configuration { components : contador : ContadorPessoasCP { using ports : video : VideoStreamIPT ; qtdPessoas : PessoasOPT ; }  monitorTemp : MonitorTemperaturaCP { using ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; } controladorComandos : ControladorComandosCP { using ports : detectado : PresencaIPT ; temperaturaUsuario : TemperaturaIPT ; comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; temperaturaDesejada : TemperaturaOPT ; } monitorAc : MonitorArCondicionadoCP { using ports : origem : StatusArCondicionadoIPT ; destino : StatusArCondicionadoOPT ; } delegations : qtdPessoas to qtdPessoas video to video temperaturaMediaAtual to temperaturaMediaAtual temperaturaSensor1 to temperaturaSensor1 temperaturaSensor2 to temperaturaSensor2 detectado to detectado temperaturaUsuario to temperaturaUsuario comando to comando comando to comando temperaturaDesejada to temperaturaDesejada origem to status destino to status } }
	component def Arquitetura { configuration { components : sensorPresenca1 : SensorPresencaCP { using ports : detectadoOut : PresencaOPT ; }  sensorTemp1 : SensorTemperaturaCP { using ports : temperaturaAtual1 : TemperaturaOPT ; } camera : CameraCP { using ports : videoOut : VideoStreamOPT ; } sensorTemp2 : SensorTemperaturaCP { using ports : temperaturaAtual2 : TemperaturaOPT ; } ac1 : ArCondicionadoCP { using ports : comandoAcIn : ComandoArCondicionadoIPT ; temperaturaDesejadaIn : TemperaturaIPT ; statusOut : StatusArCondicionadoOPT ; } lp1 : LampadaCP { using ports : comandoLpIn : ComandoLampadaIPT ; } leitor : LeitorTemperaturaCP { using ports : temperaturaDesejadaOut : TemperaturaOPT ; } interface : InterfaceWebCP { using ports : temperaturaMediaAtualOut : TemperaturaIPT ; qtdPessoasIn : PessoasIPT ; StatusConvertidoIn : StatusArCondicionadoIPT ; } ControladorCP : ControladorCP { using ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaUsuarioIn : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; detectadoIn : PresencaIPT ; comandoAcOut : ComandoArCondicionadoOPT ; comandoLpOut : ComandoLampadaOPT ; video : VideoStreamIPT ; qtdPessoasOut : PessoasOPT ; temperaturaUsuarioOut : TemperaturaOPT ; statusIn : StatusArCondicionadoIPT ; statusConvertidoOut : StatusArCondicionadoOPT ; } connectors : c1 : VideoStreamCN bindings videoOut = video ; c2 : TemperaturaCN bindings temperaturaAtual2 = temperaturaSensor2 ; c3 : TemperaturaCN bindings temperaturaAtual1 = temperaturaSensor1 ; c4 : TemperaturaCN bindings temperaturaDesejadaOut = temperaturaUsuarioIn ; c5 : PresencaCN bindings detectadoOut = detectadoIn ; c6 : ComandoLampadaCN bindings comandoLpOut = comandoLpIn ; c7 : ComandoArCondicionadoCN bindings comandoAcOut = comandoAcIn ; c8 : TemperaturaCN bindings temperaturaUsuarioOut = temperaturaDesejadaIn ; c9 : StatusArCondicionadoCN bindings statusConvertidoOut = StatusConvertidoIn ; c10 : TemperaturaCN bindings temperaturaMediaAtual = temperaturaMediaAtualOut ; c11 : PessoasCN bindings qtdPessoasOut = qtdPessoasIn ; c12 : StatusArCondicionadoCN bindings statusOut = statusIn ; } } component def MonitorArCondicionadoCP { ports : origem : StatusArCondicionadoIPT ; destino : StatusArCondicionadoOPT ; } }