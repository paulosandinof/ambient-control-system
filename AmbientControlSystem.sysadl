Model SysADLModel ; package SmartPlaceDUD { dimension Temperatura unit Celsius { dimension = Temperatura } }     Requirement GerenciarLampadasRF ( 2 ) { text = "O sistema deve ser capaz de ligar as lâmpadas quando houverem pessoas na sala, e desligar quando não houver mais ninguém." derive VerificarPresencaRF ; }  Requirement DefinirTemperaturaDesejadaRF ( 1.1 ) { text = "O sistema deve permitir que o usuário defina a temperatura do ar-condicionado por meio de um leitor na entrada da sala." derive AumentarTemperaturaRF , ReduzirTemperaturaRF ; } Requirement InterfaceWebRF ( 3 ) { text = "O sistema deve ser capaz de exibir em uma interface web, com status dos ar-condicionados das salas e a presença de pessoas." derive MonitorarArCondicionadosRF , MonitorarLampadasRF , MonitorarTemperaturaRF ; } Requirement GerenciarArCondicionadosRF ( 1 ) { text = "O sistema deve ser capaz de ligar o ar-condicionado, com a temperatura definida pelo usuário, quando houverem pessoas na sala, e desligar quando não houver mais ninguém." derive DefinirTemperaturaDesejadaRF ; } Requirement VerificarPresencaRF ( 2.1 ) { text = "O sistema deve verificar a presença de pessoas na sala, por meio de um sensor de presença." derive VerificarQuantidadeDePessoasRF ; } Requirement VerificarQuantidadeDePessoasRF ( 2.1.1 ) { text = "O sistema deve ser capaz de determinar a quantidade de pessoas presentes em uma sala." } Requirement MonitorarTemperaturaRF ( 3.3 ) { text = "O sistema deve receber os dados dos sensores de temperatura e calcular a temperatura média da sala." } Requirement MonitorarArCondicionadosRF ( 3.1 ) { text = "O sistema deve ser capaz de monitorar a situação dos ar-condiconados nas salas." } Requirement MonitorarLampadasRF ( 3.2 ) { text = "O sistema deve ser capaz de monitorar a situação das lâmpadas nas salas." } Requirement AumentarTemperaturaRF ( 1.1.1 ) { text = "O sistema deve ser capaz de aumentar a temperatura do ar-condicionado, conforme o usuário aumente a temperatura no leitor." } Requirement ReduzirTemperaturaRF ( 1.1.2 ) { text = "O sistema deve ser capaz de reduzir a temperatura do ar-condicionado, conforme o usuário aumente a temperatura no leitor." } package SmartPlaceVLD { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } enum ComandoArCondicionado { ligar , desligar } value type Temperatura { dimension = SmartPlaceDUD.Temperatura } value type TemperaturaCelsius extends Temperatura { unit = SmartPlaceDUD.Celsius dimension = SmartPlaceDUD.Temperatura } enum ComandoLampada { ligar , desligar } datatype ArCondicionado { attributes : ArCondicionado : ComandoArCondicionado ; } value type VideoStream { } } package SmartPlacePTD { import SmartPlaceVLD ; port def PresencaIPT { flow in Boolean } port def PresencaOPT { flow out Boolean } port def ComandoArCondicionadoIPT { flow in ComandoArCondicionado } port def ComandoArCondicionadoOPT { flow out ComandoArCondicionado } port def TemperaturaIPT { flow in TemperaturaCelsius } port def TemperaturaOPT { flow out TemperaturaCelsius } port def ComandoLampadaIPT { flow in ComandoLampada } port def ComandoLampadaOPT { flow out ComandoLampada } port def VideoStreamIPT { flow in VideoStream } port def VideoStreamOPT { flow out VideoStream } } package SmartPlaceCND { import SmartPlacePTD ; connector def ComandoArCondicionadoCN { participants : ~ origem : ComandoArCondicionadoIPT ; ~ destino : ComandoArCondicionadoOPT ; flows : ComandoArCondicionado from origem to destino } connector def PresencaCN { participants : ~ origem : PresencaIPT ; ~ destino : PresencaOPT ; flows : Boolean from origem to destino } connector def TemperaturaCN { participants : ~ origem : TemperaturaIPT ; ~ destino : TemperaturaOPT ; flows : TemperaturaCelsius from origem to destino } connector def ComandoLampadaCN { participants : ~ origem : ComandoLampadaIPT ; ~ destino : ComandoLampadaOPT ; flows : ComandoLampada from origem to destino } connector def VideoStreamCN { participants : ~ origem : VideoStreamIPT ; ~ destino : VideoStreamOPT ; flows : VideoStream from origem to destino } } package SmartHomeCPD { import SmartPlacePTD ; boundary
	component def SensorPresencaCP { ports : detectado : PresencaOPT ; } boundary
	component def Camera { ports : video : VideoStreamOPT ; } boundary
	component def ArCondicionadoCP { ports : comando : ComandoArCondicionadoIPT ; temperaturaDesejada : TemperaturaIPT ; } boundary
	component def SensorTemperaturaCP { ports : temperaturaAtual : TemperaturaOPT ; } boundary
	component def InterfaceWeb { ports : temperaturaMediaAtual : TemperaturaIPT ; } boundary
	component def LampadaCP { ports :  comando : ComandoLampadaIPT ; }
	component def ControladorCP { ports : detectado : PresencaIPT ; temperaturaUsuario : TemperaturaIPT ;  comando : ComandoArCondicionadoOPT ; comando : ComandoLampadaOPT ; }
	component def MonitorTemperatura { ports : temperaturaSensor1 : TemperaturaIPT ; temperaturaSensor2 : TemperaturaIPT ; temperaturaMediaAtual : TemperaturaOPT ; } boundary
	component def PainelTemperaturaCP { ports : temperaturaDesejada : TemperaturaOPT ; } component def ContadorPessoasCP { ports : video : VideoStreamIPT ; } }